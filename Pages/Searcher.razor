@page "/search"


<PageTitle>Searcher</PageTitle>

@using Conference.Data
@inject CitiesService CitiesService
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage



<h1>Find connection</h1>

<EditForm Model="@searchInfo" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <CustomValidation @ref="validation" />
    <ValidationSummary />
    <p>
        <label>
        From:
            <InputSelect id="from" @bind-Value="@searchInfo.from">
            @if (cities is not null) {
                @foreach (var city in cities)
                {
                    <option value="@city.Id">@city.Destination</option>
                }
            }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
        To:
            <InputSelect id="to" @bind-Value="@searchInfo.to">
            @if (cities is not null) {
                @foreach (var city in cities)
                {
                    <option value="@city.Id">@city.Destination</option>
                }
            }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Arrival Time:
            <RadzenDatePicker @bind-Value="@searchInfo.time" ShowTime="true" />
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>

@code
{
    private IReadOnlyList<City>? cities;

    private SearchInfo searchInfo = new SearchInfo();

    private CustomValidation? validation;


    protected override void OnInitialized()
    {
        cities = CitiesService.GetCities();
    }

    private async Task HandleValidSubmit() {
        var errors = new Dictionary<string, List<string>>();

        if (searchInfo.from == searchInfo.to) errors.Add("The same cities", new (){"Start city must be different than the destination city"});


        if (errors.Any())
        {
            validation?.DisplayErrors(errors);
        }
        else
        {
            await SessionStorage.SetItemAsync("searchInfo", searchInfo);

        NavManager.NavigateTo("/search_results");
        }
    }


}
