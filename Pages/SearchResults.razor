@page "/search_results"

<PageTitle>Search flight</PageTitle>

@using Conference.Data
@inject PlanesService PlanesService
@inject SearcherService SearcherSevice
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JS



<h1>Searcher</h1>
Please log in to be able to buy ticket.

<table class="table table-hover">
    <thead>
    <tr>
        <th>Id</th>
        <th>Start Time</th>
        <th>Arrival Time</th>
        <th>PlaneId</th>
        <th>Company</th>
        <th>Buy</th>
    </tr>
    </thead>
    <tbody>

    @foreach (var arrival in SearcherSevice.GetFlights(searchInfo.from, searchInfo.to, searchInfo.time).OrderBy(a => a.StartTime))
    {
        @if (arrival.GetType() == typeof(FlightWithChange))
        {
                FlightWithChange b = (FlightWithChange)arrival;
                RenderFragment hiddenContent = 
                 @<div>
                    <p><b>Stopover:</b></p>
                    <table class="table table-secondary">
                        <thead>
                            <tr>
                                
                                    <td>Stopover landing </td>
                                    <td>City</td>
                                    <td>Stopover departure</td>
                                
                            </tr>
                        </thead>
                        <tbody>
                                <tr>
                                    <td>@b.startStopover</td>
                                    <td>@b.whereStopover</td>
                                    <td>@b.stopStopover</td>
                                </tr>
                        </tbody>
                    </table>

                </div>;
          
                <CollapsibleTableRow HiddenContent="@hiddenContent">
                <td>@arrival.Id</td>
                <td>@arrival.StartTime</td>
                <td>@arrival.ArrivalTime</td>
                <td>@arrival.Plane?.Id</td>
                <td>@arrival.Plane?.Company</td>
                @if (userInfo.userId != 0) { <td><button @onclick="() => Click(arrival.Id, b.secondId, userInfo.userId)">Take</button></td> }
                </CollapsibleTableRow>
 
        }
        else
        {
            <tr>
            <td>@arrival.Id</td>
            <td>@arrival.StartTime</td>
            <td>@arrival.ArrivalTime</td>
            <td>@arrival.Plane?.Id</td>
            <td>@arrival.Plane?.Company</td>
                    @if (userInfo.userId != 0)
                    {
                        <td><button @onclick="() => Click(arrival.Id, userInfo.userId)">Take</button></td>
                    }

            </tr>
             
        }
    }

    </tbody>
</table>

<button @onclick="()=>Click(1,1)">Test</button>

@code {

    private SearchInfo searchInfo = new SearchInfo();
    private UserInfo userInfo = new UserInfo();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userInfo = await SessionStorage.GetItemAsync<UserInfo>("userInfo");
            searchInfo = await SessionStorage.GetItemAsync<SearchInfo>("searchInfo");

            StateHasChanged();
        }
    }

    private async Task Click(int aId, int uId) 
    {

        try 
        {
            SearcherSevice.Purchase(aId, uId);
        }
        catch (Exception e)
        {
            await JS.InvokeAsync<object>("displayAlert", e.Message);
        }
    }

    private async Task Click(int a1Id, int a2Id, int uId) 
    {

        try 
        {
            SearcherSevice.Purchase(a1Id, a2Id, uId);
        }
        catch (Exception e)
        {
            await JS.InvokeAsync<object>("displayAlert", e.Message);
        }
    }
    
}
