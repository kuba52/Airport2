@page "/flights"

<PageTitle>Departures</PageTitle>

@using Conference.Data
@using Radzen
@using Radzen.Blazor
@inject FlightsService FlightsService
@inject PlanesService PlanesService
@inject CitiesService CitiesService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JS

<h1>Arrivals:</h1>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Start Time</th>
        <th>Destination</th>
        <th>Arrival Time</th>
        <th>PlaneId</th>
        <th>Company</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var arrival in FlightsService.GetArrivals(cityInfo.cityId).OrderBy(a => a.StartTime))
    {
        <tr>
            <td>@arrival.Id</td>
            <td>@arrival.StartTime</td>
            <td>@arrival.Destination</td>
            <td>@arrival.ArrivalTime</td>
            <td>@arrival.Plane?.Id</td>
            <td>@arrival.Plane?.Company</td>
        </tr>
    }
    </tbody>
</table>

<h1>Departures:</h1>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Start Time</th>
        <th>Destination</th>
        <th>Arrival Time</th>
        <th>PlaneId</th>
        <th>Company</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var arrival in FlightsService.GetDepartures(cityInfo.cityId).OrderBy(a => a.StartTime))
    {
        <tr>
            <td>@arrival.Id</td>
            <td>@arrival.StartTime</td>
            <td>@arrival.Destination</td>
            <td>@arrival.ArrivalTime</td>
            <td>@arrival.Plane?.Id</td>
            <td>@arrival.Plane?.Company</td>
        </tr>
    }
    </tbody>
</table>

@if (userInfo.isStaff){
<h2>Add a new Flight:</h2>

<EditForm Model="@createDepartureModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <CustomValidation @ref="validation" />
    <ValidationSummary />

     <p>
        <label>
            Start Time:
            <RadzenDatePicker @bind-Value="@createDepartureModel.startTime" ShowTime="true" />
        </label>
    </p>
     <p>
        <label>
            Arrival Time:
            <RadzenDatePicker @bind-Value="@createDepartureModel.arrivalTime" ShowTime="true" />
        </label>
    </p>

    <p>
        <label>
            Plane:
            <InputSelect id="plane" @bind-Value="@createDepartureModel.planeId">
            @if (planes is not null) {
                @foreach (var plane in planes)
                {
                    <option value="@plane.Id">@plane.Company</option>
                }
            }
            </InputSelect>
        </label>
    </p>

     <p>
        <label>
            Start:
            <InputSelect id="from" @bind-Value="@createDepartureModel.start">
            @if (cities is not null) {
                @foreach (var city in cities)
                {
                    <option value="@city.Id">@city.Destination</option>
                }
            }
            </InputSelect>
        </label>
    </p>

    <p>
        <label>
            Destination:
            <InputSelect id="destination" @bind-Value="@createDepartureModel.destination">
            @if (cities is not null) {
                @foreach (var city in cities)
                {
                    <option value="@city.Id">@city.Destination</option>
                }
            }
            </InputSelect>
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>
}

@code
{
    private CreateFlight createDepartureModel = new CreateFlight();

    private IReadOnlyList<Plane>? planes;

    private IReadOnlyList<City>? cities;

    private CityInfo cityInfo = new CityInfo();
    private UserInfo userInfo = new UserInfo();

    private CustomValidation? validation;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        planes = PlanesService.GetPlanes();
        cities = CitiesService.GetCities();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
        cityInfo = await SessionStorage.GetItemAsync<CityInfo>("cityInfo");
        userInfo = await SessionStorage.GetItemAsync<UserInfo>("userInfo");
        StateHasChanged();
        }
     
    }


    private async Task HandleValidSubmit() {
        var errors = new Dictionary<string, List<string>>();
            
        if (createDepartureModel.startTime > createDepartureModel.arrivalTime) errors.Add("Arrival<start", new () {"Arrival cannot be earlier than Start"});

        if (errors.Any())
        {
            validation?.DisplayErrors(errors);
        }
        else
        {

            try 
            {
                FlightsService.CreateDeparture(createDepartureModel);
            }
            catch (Exception e)
            {
                await JS.InvokeAsync<object>("displayAlert", e.Message);
            }
    
            
        }
    }
    

}


